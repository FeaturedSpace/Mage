// Generated by CoffeeScript 1.8.0
(function() {
  var Entity, env;

  Entity = (function() {
    function Entity(options) {
      var key, val, _ref;
      this.options = options != null ? options : {};
      this.app = Wage.app;
      this.script = null;
      _ref = this.options;
      for (key in _ref) {
        val = _ref[key];
        if (key === "script") {
          this.script = val;
          this.addScript(val, this.options.dir);
        } else {
          this[key] = val;
        }
      }
      this._create();
      return this;
    }

    Entity.prototype._create = function() {
      this.object = this.create();
      if (this.object !== null) {
        this.app.add(this.object, this);
      }
    };

    Entity.prototype.create = function() {
      return null;
    };

    Entity.prototype.hasScript = function() {
      return this.script !== null;
    };

    Entity.prototype.start = function() {};

    Entity.prototype.update = function() {};

    Entity.prototype.addScript = function(name, dir) {
      var game, path;
      game = Wage.game;
      path = game.directory + (dir || "");
      game._includeScript(this, name, path);
    };

    Entity.prototype._loadScript = function(script) {
      var app, e, key, val;
      console.log("Entity loading script");
      console.log(script);
      for (key in script) {
        val = script[key];
        this[key] = val;
      }
      try {
        this.start();
      } catch (_error) {
        e = _error;
        app = Wage.app;
        app.log('e', "Something wrong with script start() method");
      }
    };

    return Entity;

  })();

  env = self.Wage != null ? self.Wage : self.Wage = {};

  env.Entity = Entity;

}).call(this);

// Generated by CoffeeScript 1.8.0
(function() {
  var Screen, env;

  Screen = (function() {
    function Screen() {
      this.zoom = 0;
      this.mouse = {
        x: 0,
        y: 0
      };
      this.set();
      return;
    }

    Screen.prototype.set = function() {
      this.w = window.innerWidth;
      this.h = window.innerHeight;
      this.ratio = this.w / this.h;
    };

    return Screen;

  })();

  env = self.Wage != null ? self.Wage : self.Wage = {};

  env.screen = new Screen();

}).call(this);

// Generated by CoffeeScript 1.8.0
(function() {
  var World, env;

  World = (function() {
    function World() {
      this.entities = {};
      return;
    }

    World.prototype.update = function() {
      var clock, dt, keys, obj, t;
      clock = Wage.clock;
      keys = Object.keys(this.entities);
      t = new Date();
      while (keys.length) {
        obj = this.entities[keys.shift()];
        if (obj.update) {
          obj.update(clock.getDelta());
        }
        dt = new Date();
        if (dt - t > 50) {
          break;
        }
      }
    };

    return World;

  })();

  env = self.Wage != null ? self.Wage : self.Wage = {};

  env.world = new World();

}).call(this);

// Generated by CoffeeScript 1.8.0
(function() {
  var Assets, env, managers;

  Assets = (function() {
    function Assets() {
      this.loaded = {
        sounds: false,
        shaders: false
      };
      return;
    }

    Assets.prototype.load = function(callback) {
      var manager, managers, name;
      this.callback = callback;
      managers = Wage.managers;
      for (name in managers) {
        manager = managers[name];
        if (manager instanceof Wage.AssetsManager) {
          manager.loadAssets();
        }
      }
    };

    Assets.prototype.notifyEnd = function(namespace) {
      var key, val, _ref;
      this.loaded[namespace] = true;
      _ref = this.loaded;
      for (key in _ref) {
        val = _ref[key];
        if (val === false) {
          return;
        }
      }
      this.callback();
    };

    return Assets;

  })();

  env = self.Wage != null ? self.Wage : self.Wage = {};

  env.Assets = Assets;

  managers = env.managers != null ? env.managers : env.managers = {};

  managers.assets = new Assets();

}).call(this);

// Generated by CoffeeScript 1.8.0
(function() {
  var Control, env;

  Control = (function() {
    function Control() {
      var app;
      app = Wage.app;
      this.handler = new app.config.controller();
      return;
    }

    Control.prototype.update = function() {
      var clock;
      clock = Wage.clock;
      this.handler.update(clock.getDelta());
    };

    return Control;

  })();

  env = self.Wage != null ? self.Wage : self.Wage = {};

  env.Control = Control;

}).call(this);

// Generated by CoffeeScript 1.8.0
(function() {
  var Game, env;

  Game = (function() {
    function Game() {
      this.directory = "app/scripts/";
      this.scripts = {};
      return;
    }

    Game.prototype.addScript = function(name, methods) {
      var key, obj, val;
      obj = {
        name: name,
        start: new Function(),
        update: new Function()
      };
      for (key in methods) {
        val = methods[key];
        obj[key] = val;
      }
      this.scripts[name] = obj;
      return obj;
    };

    Game.prototype._includeScript = function(obj, name, path) {
      var include, scope, script;
      include = Wage.include;
      scope = this;
      script = path + "/" + name;
      return include(script, function() {
        obj._loadScript(scope.scripts[name]);
      });
    };

    return Game;

  })();

  env = self.Wage != null ? self.Wage : self.Wage = {};

  env.game = new Game();

}).call(this);

// Generated by CoffeeScript 1.8.0
(function() {
  var App, env,
    __indexOf = [].indexOf || function(item) { for (var i = 0, l = this.length; i < l; i++) { if (i in this && this[i] === item) return i; } return -1; };

  App = (function() {
    function App(options) {
      this.options = options != null ? options : {};
      this.debug = true || this.options.debug;
      this.log_types = {
        e: "error",
        w: "warn",
        i: "info"
      };
      this._defaults = {
        physics: false,
        camera: {
          fov: 75,
          near: 0.1,
          far: 100
        },
        frameRate: 60,
        alphaRender: false,
        castShadows: true,
        controller: Wage.FreeController,
        controllerOptions: {},
        handlers: {
          mouse: Wage.Mouse,
          leap: Wage.Leap
        }
      };
      this.config = {};
      this._physiscs = false;
      this.devices = {};
      this.assets = {
        sounds: {},
        images: {},
        shaders: {},
        videos: {}
      };
      return this;
    }

    App.prototype.onCreate = function() {};

    App.prototype.onStart = function() {};

    App.prototype.progressAnimation = function(callback) {
      $('#loader').animate({
        opacity: 0,
        'margin-top': "250px"
      }, 1000, function() {
        $('#loader').remove();
        $('body').animate({
          backgroundColor: '#fff'
        }, 200, callback);
      });
    };

    App.prototype.render = function() {};

    App.prototype._render = function() {
      var audio, bind, camera, control, lights, renderer, rf, scene, scope, world, _ref;
      scope = this;
      scene = Wage.scene, camera = Wage.camera, world = Wage.world, control = Wage.control, renderer = Wage.renderer, bind = Wage.bind;
      _ref = Wage.managers, audio = _ref.audio, lights = _ref.lights;
      audio.update();
      lights.update();
      world.update();
      control.update();
      renderer.clear();
      this.render();
      renderer.render(scene, camera);
      rf = bind(this, this._render);
      setTimeout(function() {
        if (scope._physiscs) {
          scene.simulate();
        }
        requestAnimationFrame(rf);
      }, 1000 / this.config.frameRate);
    };

    App.prototype.add = function(mesh, element) {
      var scene, world;
      scene = Wage.scene, world = Wage.world;
      scene.add(mesh);
      world.entities[mesh.uuid] = element;
    };

    App.prototype.remove = function(mesh) {
      var scene, world;
      scene = Wage.scene, world = Wage.world;
      scene.remove(mesh);
      delete world.entities[mesh.uuid];
    };

    App.prototype._loadConfig = function() {
      var key, val, _ref, _ref1;
      _ref = this._defaults;
      for (key in _ref) {
        val = _ref[key];
        if (this.options[key] !== void 0) {
          val = this.options[key];
        }
        this.config[key] = val;
      }
      if (this.config.frameRate > 120) {
        this.config.frameRate = 120;
      }
      _ref1 = this.config.handlers;
      for (key in _ref1) {
        val = _ref1[key];
        this.devices[key] = new val();
      }
    };

    App.prototype.init = function() {
      var device, devname, e, renderer, screen, world, _ref;
      screen = Wage.screen, world = Wage.world;
      this._loadConfig();
      if (this.config.physics) {
        try {
          Physijs.scripts.worker = 'workers/physijs_worker.js';
          Wage.scene = new Physijs.Scene();
          this._physiscs = true;
        } catch (_error) {
          e = _error;
          this.log(e);
        }
      }
      if (!this._physiscs) {
        Wage.scene = new THREE.Scene();
      }
      this.config.camera.ratio = screen.ratio;
      Wage.camera = new Wage.Camera(this.config.camera).object;
      renderer = Wage.renderer = new THREE.WebGLRenderer({
        alpha: this.config.alphaRender
      });
      if (this.config.castShadows) {
        renderer.shadowMapEnabled = true;
        renderer.shadowMapType = THREE.PCFSoftShadowMap;
      }
      renderer.autoClear = false;
      renderer.setSize(screen.w, screen.h);
      document.getElementById('gameContainer').appendChild(renderer.domElement);
      Wage.control = new Wage.Control(this.config.controllerOptions);
      _ref = this.devices;
      for (devname in _ref) {
        device = _ref[devname];
        device.init();
        device.addListeners();
      }
      this.onStart();
      this._render();
    };

    App.prototype.load = function() {
      var bind;
      bind = Wage.bind;
      this.progressAnimation(bind(this, this.init));
    };

    App.prototype.start = function() {
      var assets, bind;
      this.onCreate();
      bind = Wage.bind;
      assets = Wage.managers.assets;
      assets.load(bind(this, this.load));
    };

    App.prototype.log = function() {
      var _ref;
      if (!this.debug) {
        return;
      }
      if (arguments.length > 1) {
        if (_ref = arguments[0], __indexOf.call(this.log_types, _ref) >= 0) {
          console[this.log_types[arguments[0]]](arguments[1]);
          return;
        }
      }
      console.log(arguments[0]);
    };

    App.prototype.keyup = function(e) {};

    App.prototype.keydown = function(e) {};

    App.prototype.registerAsset = function(type, name, path) {
      this.assets[type + "s"][name] = path;
    };

    return App;

  })();

  env = self.Wage != null ? self.Wage : self.Wage = {};

  env.App = App;

}).call(this);

// Generated by CoffeeScript 1.8.0
(function() {
  var Sound, env;

  Sound = (function() {
    function Sound(name, options) {
      var autoplay;
      this.name = name;
      if (options == null) {
        options = {};
      }
      this.audio = Wage.managers.audio;
      this.callbacks = {
        onEnd: options.onEnd || new Function(),
        onLoopStart: options.onLoopStart || new Function(),
        onLoopEnd: options.onLoopEnd || new Function()
      };
      this.volume = this.audio.context.createGain();
      this.source = this.audio.context.createBufferSource();
      this.reset();
      this.panner = this.audio.context.createPanner();
      this.volume.connect(this.panner);
      if (options.effects) {
        this.convolver = this.audio.context.createConvolver();
        this.mixer = this.audio.context.createGain();
        this.panner.connect(this.mixer);
        this.gains = {
          plain: this.audio.context.createGain(),
          convolver: this.audio.context.createGain()
        };
        this.mixer.connect(this.gains.plain);
        this.mixer.connect(this.gains.convolver);
        this.gains.plain.connect(this.audio.volume);
        this.gains.convolver.connect(this.audio.volume);
        this.convolver.buffer = this.audio.get(options.effect);
        this.gains.convolver.gain.value = 0.7;
        this.gains.plain.gain.value = 0.3;
      } else {
        this.panner.connect(this.audio.volume);
      }
      this._init(options);
      this.audio.add(this);
      autoplay = options.autoplay || false;
      if (autoplay) {
        this.start();
      }
      return;
    }

    Sound.prototype._init = function(options) {};

    Sound.prototype._setListeners = function() {
      var bind;
      bind = Wage.bind;
      this.source._caller = this;
      this.source.onended = bind(this, this.onEnd);
      this.source.loopEnd = bind(this, this.onLoopEnd);
      this.source.loopStart = bind(this, this.onLoopStart);
    };

    Sound.prototype.onEnd = function() {
      return this.callbacks.onEnd();
    };

    Sound.prototype.onLoopStart = function() {
      return this.callbacks.onLoopStart();
    };

    Sound.prototype.onLoopEnd = function() {
      return this.callbacks.onLoopEnd();
    };

    Sound.prototype.start = function() {
      var buffer, scope, _delay;
      scope = this;
      buffer = this.audio.get(this.name);
      if (!buffer) {
        return;
      }
      this.source.buffer = buffer;
      this.volume.gain.value = 0;
      this.source.start(this.audio.context.currentTime);
      _delay = function() {
        scope.volume.gain.value += scope.audio.config.delayFactor;
        if (scope.volume.gain.value < scope.audio.config.delayMaxTo) {
          setTimeout(_delay, scope.audio.config.delayStep);
        }
      };
      _delay();
    };

    Sound.prototype.stop = function() {
      var scope, _delay;
      scope = this;
      _delay = function() {
        scope.volume.gain.value -= scope.audio.config.delayFactor;
        if (scope.volume.gain.value > scope.audio.config.delayMinTo) {
          setTimeout(_delay, scope.audio.config.delayStep);
        } else {
          scope.source.stop();
        }
      };
      _delay();
    };

    Sound.prototype.reset = function() {
      this.source.disconnect();
      this.source = this.audio.context.createBufferSource();
      this._setListeners();
      this.volume.gain.value = this.audio.config.volume;
      this.source.connect(this.volume);
    };

    Sound.prototype.update = function(dt) {};

    return Sound;

  })();

  env = self.Wage != null ? self.Wage : self.Wage = {};

  env.Sound = Sound;

}).call(this);

// Generated by CoffeeScript 1.8.0
(function() {
  var BackgroundSound, env,
    __hasProp = {}.hasOwnProperty,
    __extends = function(child, parent) { for (var key in parent) { if (__hasProp.call(parent, key)) child[key] = parent[key]; } function ctor() { this.constructor = child; } ctor.prototype = parent.prototype; child.prototype = new ctor(); child.__super__ = parent.prototype; return child; };

  BackgroundSound = (function(_super) {
    __extends(BackgroundSound, _super);

    function BackgroundSound() {
      return BackgroundSound.__super__.constructor.apply(this, arguments);
    }

    BackgroundSound.prototype._init = function(options) {
      this.source.loop = options.loop || true;
    };

    return BackgroundSound;

  })(Wage.Sound);

  env = self.Wage != null ? self.Wage : self.Wage = {};

  env.BackgroundSound = BackgroundSound;

}).call(this);

// Generated by CoffeeScript 1.8.0
(function() {
  var MeshSound, env,
    __hasProp = {}.hasOwnProperty,
    __extends = function(child, parent) { for (var key in parent) { if (__hasProp.call(parent, key)) child[key] = parent[key]; } function ctor() { this.constructor = child; } ctor.prototype = parent.prototype; child.prototype = new ctor(); child.__super__ = parent.prototype; return child; };

  MeshSound = (function(_super) {
    __extends(MeshSound, _super);

    function MeshSound(name, mesh, options) {
      this.mesh = mesh;
      if (options == null) {
        options = {};
      }
      MeshSound.__super__.constructor.call(this, name, options);
    }

    MeshSound.prototype.update = function(dt) {
      var after, before, dx, dy, dz;
      before = new THREE.Vector3();
      before.setFromMatrixPosition(this.mesh.matrixWorld);
      this.mesh.updateMatrixWorld();
      after = new THREE.Vector3();
      after.setFromMatrixPosition(this.mesh.matrixWorld);
      dx = after.x - before.x;
      dy = after.y - before.y;
      dz = after.z - before.z;
      this.panner.setPosition(after.x, after.y, after.z);
      this.panner.setVelocity(dx / dt, dy / dt, dz / dt);
    };

    return MeshSound;

  })(Wage.Sound);

  env = self.Wage != null ? self.Wage : self.Wage = {};

  env.MeshSound = MeshSound;

}).call(this);

// Generated by CoffeeScript 1.8.0
(function() {
  var AmbientSound, env,
    __hasProp = {}.hasOwnProperty,
    __extends = function(child, parent) { for (var key in parent) { if (__hasProp.call(parent, key)) child[key] = parent[key]; } function ctor() { this.constructor = child; } ctor.prototype = parent.prototype; child.prototype = new ctor(); child.__super__ = parent.prototype; return child; };

  AmbientSound = (function(_super) {
    __extends(AmbientSound, _super);

    function AmbientSound() {
      return AmbientSound.__super__.constructor.apply(this, arguments);
    }

    AmbientSound.prototype._init = function(options) {
      this.source.loop = options.loop || false;
    };

    AmbientSound.prototype.update = function(dt) {
      var position;
      this.mesh.updateMatrixWorld();
      position = new THREE.Vector3();
      position.setFromMatrixPosition(this.mesh.matrixWorld);
      this.panner.setPosition(position.x, position.y, position.z);
    };

    return AmbientSound;

  })(Wage.MeshSound);

  env = self.Wage != null ? self.Wage : self.Wage = {};

  env.AmbientSound = AmbientSound;

}).call(this);

// Generated by CoffeeScript 1.8.0
(function() {
  var DirectionalSound, env,
    __hasProp = {}.hasOwnProperty,
    __extends = function(child, parent) { for (var key in parent) { if (__hasProp.call(parent, key)) child[key] = parent[key]; } function ctor() { this.constructor = child; } ctor.prototype = parent.prototype; child.prototype = new ctor(); child.__super__ = parent.prototype; return child; };

  DirectionalSound = (function(_super) {
    __extends(DirectionalSound, _super);

    function DirectionalSound(name, mesh, angles, options) {
      this.angles = angles;
      DirectionalSound.__super__.constructor.call(this, name, mesh, options);
    }

    DirectionalSound.prototype._init = function(options) {
      this.panner.coneInnerAngle = this.angles.innerAngleDegrees;
      this.panner.coneOuterAngle = this.angles.outerAngleDegrees;
      this.panner.coneOuterGain = this.angles.outerGainFactor;
    };

    DirectionalSound.prototype.update = function(dt) {
      var i, matrix, mx, my, mz, vec, _i;
      DirectionalSound.__super__.update.call(this, dt);
      matrix = this.mesh.matrixWorld;
      mx = matrix.elements[12];
      my = matrix.elements[13];
      mz = matrix.elements[14];
      for (i = _i = 12; _i <= 14; i = ++_i) {
        matrix.elements[i] = 0;
      }
      vec = new THREE.Vector3(0, 0, 1);
      vec.applyProjection(matrix);
      vec.normalize();
      this.panner.setOrientation(vec.x, vec.y, vec.z);
      matrix.elements[12] = mx;
      matrix.elements[13] = my;
      matrix.elements[14] = mz;
    };

    return DirectionalSound;

  })(Wage.MeshSound);

  env = self.Wage != null ? self.Wage : self.Wage = {};

  env.DirectionalSound = DirectionalSound;

}).call(this);

// Generated by CoffeeScript 1.8.0
(function() {
  var Shader, env;

  Shader = (function() {
    function Shader(name, attributes, uniforms, options) {
      var key, obj, opt, shaders, val;
      this.name = name;
      if (options == null) {
        options = {};
      }
      shaders = Wage.managers.shaders;
      this.shader = shaders.get(name);
      this.vertex = this.shader.vertex;
      this.fragment = this.shader.fragment;
      this.attributes = attributes != null ? attributes : attributes = this.shader.attributes;
      this.uniforms = uniforms != null ? uniforms : uniforms = this.shader.uniforms;
      obj = {
        attributes: this.attributes,
        uniforms: this.uniforms,
        vertexShader: this.vertex,
        fragmentShader: this.fragment
      };
      opt = this.shader.options;
      for (key in options) {
        val = options[key];
        opt[key] = val;
      }
      for (key in opt) {
        val = opt[key];
        obj[key] = val;
      }
      this.material = new THREE.ShaderMaterial(obj);
    }

    return Shader;

  })();

  env = self.Wage != null ? self.Wage : self.Wage = {};

  env.Shader = Shader;

}).call(this);

// Generated by CoffeeScript 1.8.0
(function() {
  var Controller, env;

  Controller = (function() {
    function Controller(options, domElement) {
      this.options = options != null ? options : {};
      this.domElement = domElement != null ? domElement : document;
      if (this.domElement !== document) {
        this.domElement.setAttribute('tabindex', -1);
      }
      this.config = {};
      this._defaults = this._defaults || options;
      this._loadConfig();
      this.bindable = ['keydown', 'keyup', 'mousedown', 'mouseup', 'mousemove'];
      this.addListeners();
      return;
    }

    Controller.prototype._loadConfig = function() {
      var key, val, _ref;
      _ref = this._defaults;
      for (key in _ref) {
        val = _ref[key];
        if (this.options[key] !== void 0) {
          val = this.options[key];
        }
        this.config[key] = val;
      }
    };

    Controller.prototype.addListeners = function() {
      var bind, key, _i, _len, _ref;
      this.domElement.addEventListener('contextmenu', function(e) {
        e.preventDefault();
      }, false);
      bind = Wage.bind;
      _ref = this.bindable;
      for (_i = 0, _len = _ref.length; _i < _len; _i++) {
        key = _ref[_i];
        if (this[key] !== void 0) {
          this.domElement.addEventListener(key, bind(this, this[key]), false);
        }
      }
    };

    Controller.prototype.update = function(dt) {};

    return Controller;

  })();

  env = self.Wage != null ? self.Wage : self.Wage = {};

  env.Controller = Controller;

}).call(this);

// Generated by CoffeeScript 1.8.0
(function() {
  var FreeController, env,
    __hasProp = {}.hasOwnProperty,
    __extends = function(child, parent) { for (var key in parent) { if (__hasProp.call(parent, key)) child[key] = parent[key]; } function ctor() { this.constructor = child; } ctor.prototype = parent.prototype; child.prototype = new ctor(); child.__super__ = parent.prototype; return child; };

  FreeController = (function(_super) {
    __extends(FreeController, _super);

    function FreeController(options, domElement) {
      var _ref;
      if (options == null) {
        options = {};
      }
      if (domElement == null) {
        domElement = document;
      }
      this._defaults = {
        movementSpeed: 1.0,
        rollSpeed: 0.5,
        dragToLook: false,
        autoForward: false
      };
      FreeController.__super__.constructor.call(this, options, domElement);
      this.speed = {
        movement: this.config.movementSpeed,
        roll: this.config.rollSpeed
      };
      _ref = this.config, this.dragToLook = _ref.dragToLook, this.autoForward = _ref.autoForward;
      this.mouseStatus = 0;
      this.state = {
        up: 0,
        down: 0,
        left: 0,
        right: 0,
        forward: 0,
        back: 0,
        pitchUp: 0,
        pitchDown: 0,
        yawLeft: 0,
        yawRight: 0,
        rollLeft: 0,
        rollRight: 0
      };
      this.vectors = {
        move: new THREE.Vector3(0, 0, 0),
        rotation: new THREE.Vector3(0, 0, 0)
      };
      return;
    }

    FreeController.prototype.updateMovementVector = function() {
      var forward;
      forward = this.state.forward || (this.autoForward && !this.state.back) ? 1 : 0;
      this.vectors.move.x = -this.state.left + this.state.right;
      this.vectors.move.y = -this.state.down + this.state.up;
      this.vectors.move.z = -forward + this.state.back;
    };

    FreeController.prototype.updateRotationVector = function() {
      this.vectors.rotation.x = -this.state.pitchDown + this.state.pitchUp;
      this.vectors.rotation.y = -this.state.yawRight + this.state.yawLeft;
      this.vectors.rotation.z = -this.state.rollRight + this.state.rollLeft;
    };

    FreeController.prototype.getContainerDimensions = function() {
      var rv;
      if (this.domElement !== document) {
        rv = {
          w: this.domElement.offsetWidth,
          h: this.domElement.offsetHeight,
          woffset: this.domElement.offsetLeft,
          hoffset: this.domElement.offsetTop
        };
      } else {
        rv = {
          w: window.innerWidth,
          h: window.innerHeight,
          woffset: 0,
          hoffset: 0
        };
      }
      return rv;
    };

    FreeController.prototype.keydown = function(e) {
      if (e.altKey) {
        return;
      }
      switch (e.keyCode) {
        case 16:
          this.movementSpeedMultiplier = 1;
          break;
        case 87:
          this.state.forward = 1;
          break;
        case 83:
          this.state.back = 1;
          break;
        case 65:
          this.state.left = 1;
          break;
        case 68:
          this.state.right = 1;
          break;
        case 82:
          this.state.up = 1;
          break;
        case 70:
          this.state.down = 1;
          break;
        case 38:
          this.state.pitchUp = 1;
          break;
        case 40:
          this.state.pitchDown = 1;
          break;
        case 37:
          this.state.yawLeft = 1;
          break;
        case 39:
          this.state.yawRight = 1;
          break;
        case 81:
          this.state.rollLeft = 1;
          break;
        case 69:
          this.state.rollRight = 1;
      }
      this.updateMovementVector();
      this.updateRotationVector();
    };

    FreeController.prototype.keyup = function(e) {
      switch (e.keyCode) {
        case 16:
          this.movementSpeedMultiplier = 1;
          break;
        case 87:
          this.state.forward = 0;
          break;
        case 83:
          this.state.back = 0;
          break;
        case 65:
          this.state.left = 0;
          break;
        case 68:
          this.state.right = 0;
          break;
        case 82:
          this.state.up = 0;
          break;
        case 70:
          this.state.down = 0;
          break;
        case 38:
          this.state.pitchUp = 0;
          break;
        case 40:
          this.state.pitchDown = 0;
          break;
        case 37:
          this.state.yawLeft = 0;
          break;
        case 39:
          this.state.yawRight = 0;
          break;
        case 81:
          this.state.rollLeft = 0;
          break;
        case 69:
          this.state.rollRight = 0;
      }
      this.updateMovementVector();
      this.updateRotationVector();
    };

    FreeController.prototype.mousedown = function(e) {
      if (this.domElement !== document) {
        this.domElement.focus();
      }
      e.preventDefault();
      e.stopPropagation();
      if (this.dragToLook) {
        this.mouseStatus += 1;
      } else {
        switch (e.button) {
          case 0:
            this.state.forward = 1;
            break;
          case 2:
            this.state.back = 1;
        }
      }
      this.updateMovementVector();
    };

    FreeController.prototype.mousemove = function(e) {
      var h, hoffset, w, woffset, _ref;
      if (!this.dragToLook || this.mouseStatus > 0) {
        _ref = this.getContainerDimensions(), w = _ref.w, h = _ref.h, woffset = _ref.woffset, hoffset = _ref.hoffset;
        this.state.yawLeft = -(e.pageX - woffset - w / 2) / (w / 2) * 3;
        this.state.pitchDown = (e.pageY - hoffset - h / 2) / (h / 2) * 3;
        this.updateRotationVector();
      }
    };

    FreeController.prototype.mouseup = function(e) {
      e.preventDefault();
      e.stopPropagation();
      if (this.dragToLook) {
        this.mouseStatus -= 1;
        this.state.yawLeft = this.state.pitchDown = 0;
      } else {
        switch (e.button) {
          case 0:
            this.state.forward = 0;
            break;
          case 2:
            this.state.back = 0;
        }
        this.updateMovementVector();
      }
      this.updateRotationVector();
    };

    FreeController.prototype.update = function(dt) {
      var alphaMove, alphaRotate, camera, quaternion;
      camera = Wage.camera;
      alphaMove = dt * this.speed.movement;
      alphaRotate = dt * this.speed.roll;
      camera.translateX(this.vectors.move.x * alphaMove);
      camera.translateY(this.vectors.move.y * alphaMove);
      camera.translateZ(this.vectors.move.z * alphaMove);
      quaternion = new THREE.Quaternion(this.vectors.rotation.x * alphaRotate, this.vectors.rotation.y * alphaRotate, this.vectors.rotation.z * alphaRotate);
      quaternion.normalize();
      camera.quaternion.multiply(quaternion);
      camera.rotation.setFromQuaternion(quaternion, camera.rotation.order);
    };

    return FreeController;

  })(Wage.Controller);

  env = self.Wage != null ? self.Wage : self.Wage = {};

  env.FreeController = FreeController;

}).call(this);

// Generated by CoffeeScript 1.8.0
(function() {
  var LockController, env,
    __hasProp = {}.hasOwnProperty,
    __extends = function(child, parent) { for (var key in parent) { if (__hasProp.call(parent, key)) child[key] = parent[key]; } function ctor() { this.constructor = child; } ctor.prototype = parent.prototype; child.prototype = new ctor(); child.__super__ = parent.prototype; return child; };

  LockController = (function(_super) {
    __extends(LockController, _super);

    function LockController(options) {
      var camera;
      if (options == null) {
        options = {};
      }
      this._defaults = {
        height: 5,
        crouch: 0.25,
        jumpHeight: 5,
        speed: 0.5,
        fallFactor: 0.25,
        delta: 0.1,
        mouseFactor: 0.002
      };
      LockController.__super__.constructor.call(this, options);
      camera = Wage.camera;
      camera.rotation.set(0, 0, 0);
      this.pitch = new THREE.Object3D();
      this.yaw = new THREE.Object3D();
      this.velocity = new THREE.Vector3();
      this.yaw.position.y = this.config.height;
      this.pitch.add(camera);
      this.yaw.add(this.pitch);
      this.state = {
        forward: false,
        backward: false,
        left: false,
        right: false,
        velocity: this.config.speed
      };
      this.isOnObject = false;
      this.canJump = false;
      this.shiftClicked = false;
      this.enabled = false;
      return;
    }

    LockController.prototype.keydown = function(e) {
      var canJump;
      if (e.altKey) {
        return;
      }
      switch (e.keyCode) {
        case 16:
          this.state.velocity = this.config.crouch;
          this.yaw.position.y = this.config.height / 2;
          this.canJump = false;
          this.shiftClicked = true;
          break;
        case 87 || 38:
          this.state.forward = true;
          break;
        case 83 || 40:
          this.state.backward = true;
          break;
        case 65 || 37:
          this.state.left = true;
          break;
        case 68 || 39:
          this.state.right = true;
          break;
        case 32:
          if (canJump) {
            this.velocity.y += this.config.jumpHeight;
          }
          canJump = false;
      }
    };

    LockController.prototype.keyup = function(e) {
      switch (e.keyCode) {
        case 16:
          this.state.velocity = this.config.speed;
          this.yaw.position.y = this.config.height;
          this.canJump = true;
          this.shiftClicked = false;
          break;
        case 87 || 38:
          this.state.forward = false;
          break;
        case 83 || 40:
          this.state.backward = false;
          break;
        case 65 || 37:
          this.state.left = false;
          break;
        case 68 || 39:
          this.state.right = false;
      }
    };

    LockController.prototype.mousemove = function(e) {
      var moveX, moveY;
      if (!this.enabled) {
        return;
      }
      moveX = e.movementX || e.mozMovementX || e.webkitMovementX || 0;
      moveY = e.movementY || e.mozMovementY || e.webkitMovementY || 0;
      this.yaw.rotation.y -= moveX * this.config.mouseFactor;
      this.pitch.rotation.x = moveY * this.config.mouseFactor;
      this.pitch.rotation.x = Math.max(-Math.PI / 2, Math.min(Math.PI / 2, this.pitch.rotation.x));
    };

    LockController.prototype.update = function(dt) {
      var alpha, v;
      alpha = dt * this.config.delta;
      this.velocity.y -= this.config.fallFactor * alpha;
      v = this.config.speed;
      if (this.state.forward) {
        velocity.z = -v;
      }
      if (this.state.backward) {
        velocity.z = v;
      }
      if (!this.state.forward && !this.state.backward) {
        velocity.z = 0;
      }
      if (this.state.left) {
        velocity.x = -v;
      }
      if (this.state.right) {
        this.velocity.x = v;
      }
      if (!this.state.left && !this.state.right) {
        this.velocity.x = 0;
      }
      if (this.isOnObject) {
        velocity.y = Math.max(0, this.velocity.y);
      }
      this.yaw.translateX(this.velocity.x);
      this.yaw.translateY(this.velocity.y);
      this.yaw.translateZ(this.velocity.z);
      if (this.yaw.position.y < this.config.height) {
        this.velocity.y = 0;
        this.yaw.position.y = this.shiftClicked ? this.config.height / 2 : this.config.height;
        this.canJump = true;
      }
    };

    return LockController;

  })(Wage.Controller);

  env = self.Wage != null ? self.Wage : self.Wage = {};

  env.LockController = LockController;

}).call(this);

// Generated by CoffeeScript 1.8.0
(function() {
  var AssetsManager, env;

  AssetsManager = (function() {
    function AssetsManager() {
      this.data = {};
      this._loadStack = [];
      this.assets = Wage.managers.assets;
      return;
    }

    AssetsManager.prototype.get = function(id) {
      return this.data[id];
    };

    AssetsManager.prototype.loadAssets = function() {
      var app, name, path, _ref;
      app = Wage.app;
      _ref = app.assets[this.namespace];
      for (name in _ref) {
        path = _ref[name];
        this._loadStack.push({
          name: name,
          path: path
        });
      }
      this._procStack();
    };

    AssetsManager.prototype._procStack = function() {
      var el, _i, _len, _ref;
      if (!this._loadStack.length) {
        this.assets.notifyEnd(this.namespace);
      }
      _ref = this._loadStack;
      for (_i = 0, _len = _ref.length; _i < _len; _i++) {
        el = _ref[_i];
        this._loadFile(el.name, "app/" + el.path);
      }
    };

    AssetsManager.prototype._loadFile = function(name, path) {
      this._loadCallback(name);
    };

    AssetsManager.prototype._loadCallback = function(name) {
      var i, _i, _ref;
      for (i = _i = 0, _ref = this._loadStack.length - 1; 0 <= _ref ? _i <= _ref : _i >= _ref; i = 0 <= _ref ? ++_i : --_i) {
        if (this._loadStack[i].name === name) {
          this._loadStack.splice(i, 1);
          break;
        }
      }
      if (!this._loadStack.length) {
        this.assets.notifyEnd(this.namespace);
      }
    };

    return AssetsManager;

  })();

  env = self.Wage != null ? self.Wage : self.Wage = {};

  env.AssetsManager = AssetsManager;

}).call(this);

// Generated by CoffeeScript 1.8.0
(function() {
  var AudioManager, env, managers,
    __hasProp = {}.hasOwnProperty,
    __extends = function(child, parent) { for (var key in parent) { if (__hasProp.call(parent, key)) child[key] = parent[key]; } function ctor() { this.constructor = child; } ctor.prototype = parent.prototype; child.prototype = new ctor(); child.__super__ = parent.prototype; return child; };

  AudioManager = (function(_super) {
    __extends(AudioManager, _super);

    function AudioManager() {
      var context;
      AudioManager.__super__.constructor.apply(this, arguments);
      this.namespace = "sounds";
      this.sounds = [];
      this.config = {
        volume: 80,
        delayFactor: 0.02,
        delayMaxTo: 40,
        delayMinTo: 0.2,
        delayStep: 1
      };
      context = window.AudioContext || window.webkitAudioContext;
      if (context) {
        this.context = new context();
      }
      this.volume = this.context.createGain();
      this.volume.gain.value = this.config.volume;
      this.volume.connect(this.context.destination);
    }

    AudioManager.prototype._loadFile = function(name, path) {
      var request, scope;
      scope = this;
      request = new XMLHttpRequest();
      request.open("GET", path, true);
      request.responseType = "arraybuffer";
      request.onload = function() {
        var onFailure, onSuccess;
        scope.context.decodeAudioData(this.response, onSuccess = function(buffer) {
          scope.data[name] = buffer;
        }, onFailure = function() {
          scope.data[name] = null;
        });
      };
      request.send();
      this._loadCallback(name);
    };

    AudioManager.prototype.add = function(sound) {
      this.sounds.push(sound);
    };

    AudioManager.prototype.update = function() {
      var camera, clock, down, dt, i, matrix, mx, my, mz, position, sound, t, up, _i, _j, _len, _ref;
      clock = Wage.clock, camera = Wage.camera;
      t = new Date();
      _ref = this.sounds;
      for (_i = 0, _len = _ref.length; _i < _len; _i++) {
        sound = _ref[_i];
        sound.update(clock.getDelta());
        camera.updateMatrixWorld();
        position = new THREE.Vector3();
        position.setFromMatrixPosition(camera.matrixWorld);
        this.context.listener.setPosition(position.x, position.y, position.z);
        matrix = camera.matrix;
        mx = matrix.elements[12];
        my = matrix.elements[13];
        mz = matrix.elements[14];
        for (i = _j = 12; _j <= 14; i = ++_j) {
          matrix.elements[i] = 0;
        }
        down = new THREE.Vector3(0, 0, 1);
        down.applyProjection(matrix);
        down.normalize();
        up = new THREE.Vector3(0, -1, 0);
        up.applyProjection(matrix);
        up.normalize;
        this.context.listener.setOrientation(down.x, down.y, down.z, up.x, up.y, up.z);
        matrix.elements[12] = mx;
        matrix.elements[13] = my;
        matrix.elements[14] = mz;
        dt = new Date();
        if (dt - t > 50) {
          break;
        }
      }
    };

    return AudioManager;

  })(Wage.AssetsManager);

  env = self.Wage != null ? self.Wage : self.Wage = {};

  env.AudioManager = AudioManager;

  managers = env.managers != null ? env.managers : env.managers = {};

  managers.audio = new AudioManager();

}).call(this);

// Generated by CoffeeScript 1.8.0
(function() {


}).call(this);

// Generated by CoffeeScript 1.8.0
(function() {


}).call(this);

// Generated by CoffeeScript 1.8.0
(function() {
  var LightsManager, env, managers;

  LightsManager = (function() {
    function LightsManager() {
      this.lights = [];
      this.delayFactor = 0.1;
      this.delayStep = 30;
      this.holderRadius = 0.01;
      this.holderSegments = 1;
    }

    LightsManager.prototype.add = function(light) {
      this.lights.push(light);
    };

    LightsManager.prototype.update = function() {
      var clock, dt, light, t, _i, _len, _ref;
      clock = Wage.clock;
      t = new Date();
      _ref = this.lights;
      for (_i = 0, _len = _ref.length; _i < _len; _i++) {
        light = _ref[_i];
        light.update(clock.getDelta());
        dt = new Date();
        if (dt - start > 50) {
          break;
        }
      }
    };

    return LightsManager;

  })();

  env = self.Wage != null ? self.Wage : self.Wage = {};

  env.LightsManager = LightsManager;

  managers = env.managers != null ? env.managers : env.managers = {};

  managers.lights = new LightsManager();

}).call(this);

// Generated by CoffeeScript 1.8.0
(function() {
  var ShadersManager, env, managers,
    __hasProp = {}.hasOwnProperty,
    __extends = function(child, parent) { for (var key in parent) { if (__hasProp.call(parent, key)) child[key] = parent[key]; } function ctor() { this.constructor = child; } ctor.prototype = parent.prototype; child.prototype = new ctor(); child.__super__ = parent.prototype; return child; };

  ShadersManager = (function(_super) {
    __extends(ShadersManager, _super);

    function ShadersManager() {
      ShadersManager.__super__.constructor.apply(this, arguments);
      this.namespace = "shaders";
    }

    ShadersManager.prototype._loadFile = function(name, path) {
      var include, request, scope, type;
      include = Wage.include;
      scope = this;
      type = path.split(".")[1];
      if (type === "js") {
        include(path.split(".js")[0](this._loadCallback, name));
      } else {
        request = new XMLHttpRequest();
        request.open("GET", path, true);
        request.responseType = "text";
        request.onload = function() {
          var shader;
          shader = scope._parseShader(this.responseText);
          scope._add(shader);
        };
        request.send();
      }
      this._loadCallback(name);
    };

    ShadersManager.prototype._parseShader = function(text) {
      var obj;
      return obj = {
        name: text.substring(text.indexOf('<name>') + 6, text.indexOf('</name>')),
        vertex: text.substring(text.indexOf('<vertex>') + 8, text.indexOf('</vertex>')),
        fragment: text.substring(text.indexOf('<fragment>') + 10, text.indexOf('</fragment>')),
        attributes: {},
        uniforms: {},
        options: {}
      };
    };

    ShadersManager.prototype.create = function(name, data) {
      this._add({
        name: name,
        vertex: data.vertex || "",
        fragment: data.fragment || "",
        attributes: data.attributes || {},
        uniforms: data.uniforms || {},
        options: data.options || {}
      });
    };

    ShadersManager.prototype._add = function(shader) {
      this.data[shader.name] = shader;
    };

    return ShadersManager;

  })(Wage.AssetsManager);

  env = self.Wage != null ? self.Wage : self.Wage = {};

  env.ShadersManager = ShadersManager;

  managers = env.managers != null ? env.managers : env.managers = {};

  managers.shaders = new ShadersManager();

}).call(this);

// Generated by CoffeeScript 1.8.0
(function() {
  var Camera, env,
    __hasProp = {}.hasOwnProperty,
    __extends = function(child, parent) { for (var key in parent) { if (__hasProp.call(parent, key)) child[key] = parent[key]; } function ctor() { this.constructor = child; } ctor.prototype = parent.prototype; child.prototype = new ctor(); child.__super__ = parent.prototype; return child; };

  Camera = (function(_super) {
    __extends(Camera, _super);

    function Camera(options) {
      this.options = options != null ? options : {};
      Camera.__super__.constructor.call(this, options);
    }

    Camera.prototype.create = function() {
      var rv;
      rv = new THREE.PerspectiveCamera(this.options.fov, this.options.ratio, this.options.near, this.options.far);
      rv.entity = this;
      return rv;
    };

    return Camera;

  })(Wage.Entity);

  env = self.Wage != null ? self.Wage : self.Wage = {};

  env.Camera = Camera;

}).call(this);

// Generated by CoffeeScript 1.8.0
(function() {
  var Light, env,
    __hasProp = {}.hasOwnProperty,
    __extends = function(child, parent) { for (var key in parent) { if (__hasProp.call(parent, key)) child[key] = parent[key]; } function ctor() { this.constructor = child; } ctor.prototype = parent.prototype; child.prototype = new ctor(); child.__super__ = parent.prototype; return child; };

  Light = (function(_super) {
    __extends(Light, _super);

    function Light(color, intensity, position, options) {
      this.color = color;
      this.intensity = intensity;
      if (position == null) {
        position = null;
      }
      if (options == null) {
        options = {};
      }
      if (position === null) {
        position = {
          x: 0,
          y: 0,
          z: 0
        };
      }
      this.position = position;
      this.isOn = false;
      this.lights = Wage.managers.lights;
      Light.__super__.constructor.call(this, options);
    }

    Light.prototype.create = function() {
      Wage.managers.lights.add(this);
      return null;
    };

    Light.prototype.on = function() {};

    Light.prototype.off = function() {};

    return Light;

  })(Wage.Entity);

  env = self.Wage != null ? self.Wage : self.Wage = {};

  env.Light = Light;

}).call(this);

// Generated by CoffeeScript 1.8.0
(function() {
  var AmbientLight, env,
    __hasProp = {}.hasOwnProperty,
    __extends = function(child, parent) { for (var key in parent) { if (__hasProp.call(parent, key)) child[key] = parent[key]; } function ctor() { this.constructor = child; } ctor.prototype = parent.prototype; child.prototype = new ctor(); child.__super__ = parent.prototype; return child; };

  AmbientLight = (function(_super) {
    __extends(AmbientLight, _super);

    function AmbientLight() {
      return AmbientLight.__super__.constructor.apply(this, arguments);
    }

    AmbientLight.prototype.create = function() {
      AmbientLight.__super__.create.apply(this, arguments);
      return new THREE.AmbientLight(this.color);
    };

    return AmbientLight;

  })(Wage.Light);

  env = self.Wage != null ? self.Wage : self.Wage = {};

  env.AmbientLight = AmbientLight;

}).call(this);

// Generated by CoffeeScript 1.8.0
(function() {
  var PointLight, env,
    __hasProp = {}.hasOwnProperty,
    __extends = function(child, parent) { for (var key in parent) { if (__hasProp.call(parent, key)) child[key] = parent[key]; } function ctor() { this.constructor = child; } ctor.prototype = parent.prototype; child.prototype = new ctor(); child.__super__ = parent.prototype; return child; };

  PointLight = (function(_super) {
    __extends(PointLight, _super);

    function PointLight(color, intensity, distance, position, options) {
      this.distance = distance;
      PointLight.__super__.constructor.call(this, color, intensity, position, options);
    }

    PointLight.prototype.create = function() {
      var mesh;
      PointLight.__super__.create.apply(this, arguments);
      this.geometry = new THREE.SphereGeometry(this.lights.holderRadius, this.lights.holderSegment, this.lights.holderSegment);
      this.material = new THREE.MeshPhongMaterial({
        color: this.color
      });
      mesh = new THREE.Mesh(this.geometry, this.material);
      this.light = new THREE.PointLight(this.color, this.intensity, this.distance);
      mesh.position.set(this.position.x, this.position.y, this.position.z);
      this.light.position = mesh.position;
      mesh.add(this.light);
      return mesh;
    };

    PointLight.prototype.on = function() {
      var self, _delay;
      self = this;
      _delay = function() {
        self.light.intensity += self.lights.delayFactor;
        if (self.light.intensity < self.intensity) {
          setTimeout(_delay, self.lights.delayStep);
        } else {
          self.isOn = true;
        }
      };
      _delay();
    };

    PointLight.prototype.off = function() {
      var self, _delay;
      self = this;
      _delay = function() {
        self.light.intensity -= self.lights.delayFactor;
        if (self.light.intensity > 0) {
          setTimeout(_delay, self.lights.delayStep);
        } else {
          self.isOn = false;
        }
      };
      _delay();
    };

    return PointLight;

  })(Wage.Light);

  env = self.Wage != null ? self.Wage : self.Wage = {};

  env.PointLight = PointLight;

}).call(this);

// Generated by CoffeeScript 1.8.0
(function() {
  var Mesh, env,
    __hasProp = {}.hasOwnProperty,
    __extends = function(child, parent) { for (var key in parent) { if (__hasProp.call(parent, key)) child[key] = parent[key]; } function ctor() { this.constructor = child; } ctor.prototype = parent.prototype; child.prototype = new ctor(); child.__super__ = parent.prototype; return child; };

  Mesh = (function(_super) {
    __extends(Mesh, _super);

    function Mesh(geometry, material, options) {
      this.geometry = geometry;
      this.material = material;
      if (options == null) {
        options = {};
      }
      Mesh.__super__.constructor.call(this, options);
    }

    Mesh.prototype.create = function() {
      return new THREE.Mesh(this.geometry, this.material);
    };

    Mesh.prototype.scale = function(x, y, z) {
      this.object.scale.set(x, y, z);
    };

    return Mesh;

  })(Wage.Entity);

  env = self.Wage != null ? self.Wage : self.Wage = {};

  env.Mesh = Mesh;

}).call(this);

// Generated by CoffeeScript 1.8.0
(function() {
  var ShaderMesh, env,
    __hasProp = {}.hasOwnProperty,
    __extends = function(child, parent) { for (var key in parent) { if (__hasProp.call(parent, key)) child[key] = parent[key]; } function ctor() { this.constructor = child; } ctor.prototype = parent.prototype; child.prototype = new ctor(); child.__super__ = parent.prototype; return child; };

  ShaderMesh = (function(_super) {
    __extends(ShaderMesh, _super);

    function ShaderMesh(geometry, name, attributes, uniforms, options) {
      var shader;
      this.name = name;
      this.attributes = attributes;
      this.uniforms = uniforms;
      if (options == null) {
        options = {};
      }
      shader = new Wage.Shader(this.name, this.attributes, this.uniforms);
      if (!this.attributes) {
        this.attributes = shader.attributes;
      }
      if (!this.uniforms) {
        this.uniforms = shader.uniforms;
      }
      ShaderMesh.__super__.constructor.call(this, this.geometry, shader.material, options);
    }

    return ShaderMesh;

  })(Wage.Mesh);

  env = self.Wage != null ? self.Wage : self.Wage = {};

  env.ShaderMesh = ShaderMesh;

}).call(this);

// Generated by CoffeeScript 1.8.0
(function() {
  var AnimatedMesh, env,
    __hasProp = {}.hasOwnProperty,
    __extends = function(child, parent) { for (var key in parent) { if (__hasProp.call(parent, key)) child[key] = parent[key]; } function ctor() { this.constructor = child; } ctor.prototype = parent.prototype; child.prototype = new ctor(); child.__super__ = parent.prototype; return child; };

  AnimatedMesh = (function(_super) {
    __extends(AnimatedMesh, _super);

    function AnimatedMesh(geometry, materials, options) {
      var originalMaterial;
      this.materials = materials;
      if (options == null) {
        options = {};
      }
      this.animations = {};
      this.fadeStack = [];
      this.warpStack = [];
      originalMaterial = this.materials[0];
      originalMaterial.skinning = true;
      this.meshVisible = true;
      AnimatedMesh.__super__.constructor.call(this, geometry, originalMaterial, options);
    }

    AnimatedMesh.prototype.create = function() {
      var animation, mesh, _i, _len, _ref;
      mesh = new THREE.SkinnedMesh(this.geometry, this.material);
      _ref = this.geometry.animations;
      for (_i = 0, _len = _ref.length; _i < _len; _i++) {
        animation = _ref[_i];
        this.animations[animation.name] = new THREE.Animation(mesh, animation);
      }
      this.skeleton = new THREE.SkeletonHelper(mesh);
      this.skeleton.material.linewidth = 3;
      mesh.add(this.skeleton);
      this.skeletonVisible = false;
      this.skeleton.visible = this.skeletonVisible;
      return mesh;
    };

    AnimatedMesh.prototype.toggleSkeleton = function() {
      this.skeletonVisible = !this.skeletonVisible;
      return this.skeleton.visible = this.skeletonVisible;
    };

    AnimatedMesh.prototype.toggleModel = function() {
      this.meshVisible = !this.meshVisible;
      return this.object.visible = this.meshVisible;
    };

    AnimatedMesh.prototype.setWeights = function(weights) {
      var animation, key, val;
      if (weights == null) {
        weights = {};
      }
      for (key in weights) {
        val = weights[key];
        animation = this.animations[key];
        if (animation) {
          this.animations[key] = val;
        }
      }
    };

    AnimatedMesh.prototype.update = function(dt) {
      this.updateFades(dt);
      this.updateWarps(dt);
      THREE.AnimationHandler.update(dt);
    };

    AnimatedMesh.prototype.updateFades = function(dt) {
      var data, i, _i, _ref;
      for (i = _i = _ref = this.fadeStack.length - 1; _ref <= 0 ? _i <= 0 : _i >= 0; i = _ref <= 0 ? ++_i : --_i) {
        data = this.fadeStack[i];
        data.timeElapsed += dt;
        if (data.timeElapsed > data.duration) {
          data.anim.weight = data.endWeight;
          this.fadeStack.splice(i, 1);
          if (data.anim.weight === 0) {
            data.anim.stop(0);
          }
        } else {
          data.anim.weight = data.startWeight + (data.endWeight - data.startWeight) * data.timeElapsed / data.duration;
        }
      }
    };

    AnimatedMesh.prototype.updateWarps = function(dt) {
      var alpha, data, fromToRatio, i, toFromRatio, _i, _ref;
      for (i = _i = _ref = this.warpStack.length - 1; _ref <= 0 ? _i <= 0 : _i >= 0; i = _ref <= 0 ? ++_i : --_i) {
        data = this.warpStack[i];
        data.timeElapsed += dt;
        if (data.timeElapsed > data.duration) {
          data.to.weight = 1;
          data.to.timeScale = 1;
          data.from.weight = 0;
          data.from.timeScale = 1;
          data.from.stop(0);
          this.warpStack.splice(i, 1);
        } else {
          alpha = data.timeElapsed / data.duration;
          fromToRatio = data.from.data.length / data.to.data.length;
          toFromRatio = data.to.data.length / data.from.data.length;
          data.from.timeScale = (1 - alpha) + fromToRatio * alpha;
          data.to.timeScale = alpha + toFromRatio * (1 - alpha);
          data.from.weight = 1 - alpha;
          data.to.weight = alpha;
        }
      }
    };

    AnimatedMesh.prototype.play = function(animation) {
      var weight, _base;
      weight = (_base = this.animations[animation]).weight != null ? _base.weight : _base.weight = 1;
      this.animations[animation].play(0, weight);
    };

    AnimatedMesh.prototype.crossfade = function(fromAnimation, toAnimation, duration) {
      var anim1, anim2;
      anim1 = this.animations[fromAnimation];
      anim2 = this.animations[toAnimation];
      anim1.play(0, 1);
      anim2.play(0, 0);
      this.fadeStack.push({
        anim: anim1,
        startWeight: 1,
        endWeight: 0,
        timeElapsed: 0,
        duration: duration
      });
      this.fadeStack.push({
        anim: anim2,
        startWeight: 0,
        endWeight: 1,
        timeElapsed: 0,
        duration: duration
      });
    };

    AnimatedMesh.prototype.warp = function(fromAnimation, toAnimation, duration) {
      var anim1, anim2;
      anim1 = this.animations[fromAnimation];
      anim2 = this.animations[toAnimation];
      anim1.play(0, 1);
      anim2.play(0, 0);
      this.warpStack.push({
        from: anim1,
        to: anim2,
        timeElapsed: 0,
        duration: duration
      });
    };

    AnimatedMesh.prototype.applyWeight = function(animation, w) {
      return this.animations[animation].weight = weight;
    };

    AnimatedMesh.prototype.pauseAll = function() {
      var animName, animation, _ref;
      _ref = this.animations;
      for (animName in _ref) {
        animation = _ref[animName];
        if (animation.isPlaying) {
          animation.stop();
        }
      }
    };

    AnimatedMesh.prototype.unpauseAll = function() {
      var animName, animation, _ref;
      _ref = this.animations;
      for (animName in _ref) {
        animation = _ref[animName];
        if (animation.isPlaying && animation.isPaused) {
          animation.pause();
        }
      }
    };

    AnimatedMesh.prototype.stopAll = function() {
      var animName, animation, _ref;
      _ref = this.animations;
      for (animName in _ref) {
        animation = _ref[animName];
        if (animation.isPlaying) {
          animation.stop(0);
        }
        animation.weight = 0;
      }
      this.fadeStack.length = 0;
      this.warpStack.length = 0;
    };

    AnimatedMesh.prototype.getForward = function() {
      var forward;
      forward = new THREE.Vector3();
      return function() {
        forward.set(-this.matrix.elements[8], -this.matrix.elements[9], -matrix.elements[10]);
        return forward;
      };
    };

    return AnimatedMesh;

  })(Wage.Mesh);

  env = self.Wage != null ? self.Wage : self.Wage = {};

  env.AnimatedMesh = AnimatedMesh;

}).call(this);

// Generated by CoffeeScript 1.8.0
(function() {
  var Mouse, env;

  Mouse = (function() {
    function Mouse() {}

    Mouse.prototype.init = function() {
      this.screen = Wage.screen, this.camera = Wage.camera;
    };

    Mouse.prototype.addListeners = function() {
      var bind, control, dom;
      control = Wage.control, bind = Wage.bind;
      dom = control.handler.domElement;
      dom.addEventListener('mousemove', bind(this, this.onMove), false);
      dom.addEventListener('mousewheel', bind(this, this.onWheel), false);
      dom.addEventListener('touchstart', bind(this, this.onTouchStart), false);
      dom.addEventListener('touchmove', bind(this, this.onTouchMove), false);
    };

    Mouse.prototype.onWheel = function(e) {
      e.preventDefault();
      this.screen.zoom = e.wheelDelta * 0.05;
      this.camera.position.z += this.screen.zoom;
    };

    Mouse.prototype.onMove = function(e) {
      this.screen.mouse.x = e.clientX - (this.screen.w / 2);
      this.screen.mouse.y = e.clientY - (this.screen.h / 2);
    };

    Mouse.prototype.onTouchStart = function(e) {
      this.onTouchMove(e);
    };

    Mouse.prototype.onTouchMove = function(e) {
      if (e.thouches.length === 1) {
        e.preventDefault();
        this.screen.mouse.x = e.touches[0].pageX - (this.screen.w / 2);
        this.screen.mouse.y = e.touches[0].pageY - (this.screen.h / 2);
      }
    };

    return Mouse;

  })();

  env = self.Wage != null ? self.Wage : self.Wage = {};

  env.Mouse = Mouse;

}).call(this);

// Generated by CoffeeScript 1.8.0
(function() {
  var Leap, env;

  Leap = (function() {
    function Leap() {}

    Leap.prototype.init = function() {};

    Leap.prototype.addListeners = function() {};

    Leap.prototype.onSocketConnected = function() {};

    Leap.prototype.onDeviceConnected = function() {};

    Leap.prototype.onDeviceDisconnected = function() {};

    return Leap;

  })();

  env = self.Wage != null ? self.Wage : self.Wage = {};

  env.Leap = Leap;

}).call(this);

// Generated by CoffeeScript 1.8.0
(function() {
  var bind, env, include;

  env = self.Wage != null ? self.Wage : self.Wage = {};

  env.clock = new THREE.Clock();

  include = function(srcs, callback, params) {
    var alreadyGot, el, got, s, scripts, src, t, _callOnEnd, _i, _j, _len, _len1, _scripts;
    if (srcs.constructor !== Array) {
      srcs = [srcs];
    }
    scripts = [];
    alreadyGot = function(value) {
      var el, _i, _len;
      for (_i = 0, _len = scripts.length; _i < _len; _i++) {
        el = scripts[_i];
        if (el.indexOf(value) !== -1) {
          return true;
        }
      }
      return false;
    };
    got = 0;
    _callOnEnd = function() {
      if (got === srcs.length) {
        callback(params);
      }
    };
    _scripts = document.getElementsByTagName('script');
    for (_i = 0, _len = _scripts.length; _i < _len; _i++) {
      el = _scripts[_i];
      scripts.push(el.src);
    }
    for (_j = 0, _len1 = srcs.length; _j < _len1; _j++) {
      src = srcs[_j];
      if (alreadyGot(src)) {
        continue;
      }
      s = document.createElement('script');
      s.type = "text/javascript";
      s.src = src + ".js";
      s.onload = s.onreadystatechange = function() {
        if (!this.readyState || this.readyState === "complete") {
          got += 1;
          return _callOnEnd();
        }
      };
      t = document.getElementsByTagName('script')[0];
      t.parentNode.insertBefore(s, t);
    }
    _callOnEnd();
  };

  bind = function(scope, fn) {
    return function() {
      fn.apply(scope, arguments);
    };
  };

  env.include = include;

  env.bind = bind;

  self.requestAnimationFrame = window.requestAnimationFrame || window.webkitRequestAnimationFrame || window.mozRequestAnimationFrame || window.oRequestAnimationFrame || window.msRequestAnimationFrame;

  self.onload = function() {
    if (self.app !== void 0) {
      Wage.app = app;
    } else {
      Wage.app = new Wage.App();
    }
    Wage.app.start();
  };

  self.onresize = function() {
    var camera, renderer, screen;
    screen = Wage.screen, camera = Wage.camera, renderer = Wage.renderer;
    screen.set();
    camera.aspect = screen.ratio;
    camera.updateProjectionMatrix();
    renderer.setSize(screen.w, screen.h);
  };

}).call(this);

